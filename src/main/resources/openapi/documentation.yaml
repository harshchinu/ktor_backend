openapi: "3.1.0"
info:
  title: "backend API"
  description: "backend API"
  version: "1.0.0"
servers:
- url: "https://backend"
paths:
  /:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Hello World!"
  /audit-logs:
    get:
      description: "Get All Audit Logs"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/AuditLogResponse"
  /audit-logs/factory/{factoryId}:
    get:
      description: "Get Audit Logs by Factory ID"
      parameters:
      - name: "factoryId"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid factory ID"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/AuditLogResponse"
  /audit-logs/order/{orderId}:
    get:
      description: "Get Audit Logs by Order ID"
      parameters:
      - name: "orderId"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid order ID"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/AuditLogResponse"
  /audit-logs/task/{taskId}:
    get:
      description: "Get Audit Logs by Task ID"
      parameters:
      - name: "taskId"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid task ID"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/AuditLogResponse"
  /audit-logs/worker/{workerId}:
    get:
      description: "Get Audit Logs by Worker ID"
      parameters:
      - name: "workerId"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid worker ID"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/AuditLogResponse"
  /auth/signin:
    post:
      description: "Sign-In"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserSignInRequest"
        required: true
      responses:
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid credentials"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
  /auth/signup:
    post:
      description: "Sign-Up"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserSignUpRequest"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
  /factories:
    post:
      description: "Create a factory"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FactoryRequest"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                type: "integer"
                format: "int32"
  /factories/{id}:
    delete:
      description: "Delete a factory"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid factory ID"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Factory not found"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Factory deleted successfully"
    get:
      description: "Get a factory by ID"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid factory ID"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Factory not found"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/FactoryResponse"
    put:
      description: "Update a factory"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FactoryRequest"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid factory ID"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Factory not found"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Factory updated successfully"
  /manufacturers:
    get:
      description: "Get All Manufacturers"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ManufacturerResponse"
    post:
      description: "Create Manufacturer"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ManufacturerRequest"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
  /manufacturers/{id}:
    delete:
      description: "Delete Manufacturer"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid manufacturer ID"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Manufacturer not found"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Manufacturer deleted successfully"
    get:
      description: "Get Manufacturer by ID"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid manufacturer ID"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Manufacturer not found"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ManufacturerResponse"
    put:
      description: "Update Manufacturer"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ManufacturerRequest"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid manufacturer ID"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Manufacturer not found"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Manufacturer updated successfully"
  /payroll:
    get:
      description: "Get All Payroll Records"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/PayrollResponse"
    post:
      description: "Create Payroll Record"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PayrollRequest"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
  /payroll/{id}:
    get:
      description: "Get Payroll Record by ID"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid payroll ID"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Payroll record not found"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PayrollResponse"
  /payroll/factory/{factoryId}:
    get:
      description: "Get Payroll Records by Factory"
      parameters:
      - name: "factoryId"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid factory ID"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/PayrollResponse"
  /payroll/worker/{workerId}:
    get:
      description: "Get Payroll Records by Worker"
      parameters:
      - name: "workerId"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid worker ID"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/PayrollResponse"
  /products:
    get:
      description: "Get All Products"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ProductResponse"
    post:
      description: "Product Routes <br> Create Product"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductRequest"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
  /products/{id}:
    delete:
      description: "Delete Product"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid product ID"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Product not found"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Product deleted successfully"
    get:
      description: "Get Product by ID"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid product ID"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Product not found"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ProductResponse"
    put:
      description: "Update Product"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductRequest"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid product ID"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Product not found"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Product updated successfully"
  /products/{productId}/variants:
    get:
      description: "Get All Variants for a Product"
      parameters:
      - name: "productId"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid product ID"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/VariantResponse"
    post:
      description: "Variant Routes <br> Create Variant"
      parameters:
      - name: "productId"
        in: "path"
        required: true
        schema:
          type: "integer"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VariantRequest"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid product ID"
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
  /raw-materials:
    get:
      description: "Get All Raw Materials"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/RawMaterialResponse"
    post:
      description: "Create Raw Material"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RawMaterialRequest"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
  /raw-materials/{id}:
    delete:
      description: "Delete Raw Material"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid raw material ID"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Raw material not found"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Raw material deleted successfully"
    get:
      description: "Get Raw Material by ID"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid raw material ID"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Raw material not found"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/RawMaterialResponse"
    put:
      description: "Update Raw Material"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RawMaterialRequest"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid raw material ID"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Raw material not found"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Raw material updated successfully"
  /raw-materials/stock:
    get:
      description: "Fetch Current Stock Levels"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/RawMaterialStockResponse"
  /stock/products:
    get:
      description: "Product Stock Routes <br> Get Product Stock Levels"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ProductStockResponse"
  /stock/products/{variantId}:
    put:
      description: "Update Product Stock Levels"
      parameters:
      - name: "variantId"
        in: "path"
        required: true
        schema:
          type: "integer"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StockUpdateRequest"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid variant ID"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Product variant not found"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Product stock updated successfully"
  /stock/raw-materials:
    get:
      description: "Raw Material Stock Routes <br> Get Raw Material Stock Levels"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/RawMaterialResponse"
  /stock/raw-materials/{materialId}:
    put:
      description: "Update Raw Material Stock Levels"
      parameters:
      - name: "materialId"
        in: "path"
        required: true
        schema:
          type: "integer"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StockUpdateRequest"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid material ID"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Raw material not found"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Raw material stock updated successfully"
  /users:
    get:
      description: "Get All Users"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/UserResponse"
  /users/{id}:
    get:
      description: "Get User by ID"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid user ID"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "User not found"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
  /workflows:
    get:
      description: "Get All Workflows"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/WorkflowResponse"
    post:
      description: "Workflow Routes <br> Create Workflow"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkflowRequest"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
  /workflows/{id}:
    delete:
      description: "Delete Workflow"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid workflow ID"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Workflow not found"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Workflow deleted successfully"
    get:
      description: "Get Workflow by ID"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid workflow ID"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Workflow not found"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/WorkflowResponse"
    put:
      description: "Update Workflow"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkflowRequest"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid workflow ID"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Workflow not found"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Workflow updated successfully"
  /workflows/{workflowId}/tasks:
    get:
      description: "Get All Tasks for a Workflow"
      parameters:
      - name: "workflowId"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid workflow ID"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/TaskResponse"
    post:
      description: "Task Routes <br> Create Task"
      parameters:
      - name: "workflowId"
        in: "path"
        required: true
        schema:
          type: "integer"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskRequest"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid workflow ID"
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
components:
  schemas:
    AuditLogResponse:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        factoryId:
          type: "integer"
          format: "int32"
        orderId:
          type: "integer"
          format: "int32"
        taskId:
          type: "integer"
          format: "int32"
        workerId:
          type: "integer"
          format: "int32"
        action:
          type: "string"
        timestamp:
          type: "string"
      required:
      - "id"
      - "factoryId"
      - "action"
      - "timestamp"
    UserSignInRequest:
      type: "object"
      properties:
        email:
          type: "string"
        password:
          type: "string"
      required:
      - "email"
      - "password"
    Map:
      type: "object"
      properties: {}
    Map_String:
      type: "string"
    UserSignUpRequest:
      type: "object"
      properties:
        factoryId:
          type: "integer"
          format: "int32"
        name:
          type: "string"
        email:
          type: "string"
        password:
          type: "string"
        role:
          type: "string"
      required:
      - "factoryId"
      - "name"
      - "email"
      - "password"
      - "role"
    FactoryRequest:
      type: "object"
      properties:
        name:
          type: "string"
        address:
          type: "string"
        contactInfo:
          type: "string"
      required:
      - "name"
      - "address"
      - "contactInfo"
    FactoryResponse:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        name:
          type: "string"
        address:
          type: "string"
        contactInfo:
          type: "string"
      required:
      - "id"
      - "name"
      - "address"
      - "contactInfo"
    ManufacturerResponse:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        factoryId:
          type: "integer"
          format: "int32"
        name:
          type: "string"
        contactInfo:
          type: "string"
        address:
          type: "string"
      required:
      - "id"
      - "factoryId"
      - "name"
      - "contactInfo"
      - "address"
    ManufacturerRequest:
      type: "object"
      properties:
        factoryId:
          type: "integer"
          format: "int32"
        name:
          type: "string"
        contactInfo:
          type: "string"
        address:
          type: "string"
      required:
      - "factoryId"
      - "name"
      - "contactInfo"
      - "address"
    PayrollResponse:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        workerId:
          type: "integer"
          format: "int32"
        taskId:
          type: "integer"
          format: "int32"
        quantityCompleted:
          type: "number"
          format: "double"
        totalPay:
          type: "number"
          format: "double"
        factoryId:
          type: "integer"
          format: "int32"
      required:
      - "id"
      - "workerId"
      - "taskId"
      - "quantityCompleted"
      - "totalPay"
      - "factoryId"
    PayrollRequest:
      type: "object"
      properties:
        workerId:
          type: "integer"
          format: "int32"
        taskId:
          type: "integer"
          format: "int32"
        quantityCompleted:
          type: "number"
          format: "double"
        totalPay:
          type: "number"
          format: "double"
        factoryId:
          type: "integer"
          format: "int32"
      required:
      - "workerId"
      - "taskId"
      - "quantityCompleted"
      - "totalPay"
      - "factoryId"
    ProductResponse:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        factoryId:
          type: "integer"
          format: "int32"
        productName:
          type: "string"
        description:
          type: "string"
        category:
          type: "string"
      required:
      - "id"
      - "factoryId"
      - "productName"
      - "description"
      - "category"
    ProductRequest:
      type: "object"
      properties:
        factoryId:
          type: "integer"
          format: "int32"
        productName:
          type: "string"
        description:
          type: "string"
        category:
          type: "string"
      required:
      - "factoryId"
      - "productName"
      - "description"
      - "category"
    VariantResponse:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        productId:
          type: "integer"
          format: "int32"
        variantName:
          type: "string"
        skuCode:
          type: "string"
        price:
          type: "number"
          format: "double"
      required:
      - "id"
      - "productId"
      - "variantName"
      - "skuCode"
      - "price"
    VariantRequest:
      type: "object"
      properties:
        variantName:
          type: "string"
        skuCode:
          type: "string"
        price:
          type: "number"
          format: "double"
      required:
      - "variantName"
      - "skuCode"
      - "price"
    RawMaterialResponse:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        factoryId:
          type: "integer"
          format: "int32"
        materialName:
          type: "string"
        description:
          type: "string"
        unitOfMeasurement:
          type: "string"
        currentStock:
          type: "number"
          format: "double"
      required:
      - "id"
      - "factoryId"
      - "materialName"
      - "description"
      - "unitOfMeasurement"
      - "currentStock"
    RawMaterialRequest:
      type: "object"
      properties:
        factoryId:
          type: "integer"
          format: "int32"
        materialName:
          type: "string"
        description:
          type: "string"
        unitOfMeasurement:
          type: "string"
      required:
      - "factoryId"
      - "materialName"
      - "description"
      - "unitOfMeasurement"
    RawMaterialStockResponse:
      type: "object"
      properties:
        materialName:
          type: "string"
        currentStock:
          type: "number"
          format: "double"
      required:
      - "materialName"
      - "currentStock"
    ProductStockResponse:
      type: "object"
      properties:
        variantId:
          type: "integer"
          format: "int32"
        variantName:
          type: "string"
        skuCode:
          type: "string"
        quantityInStock:
          type: "number"
          format: "double"
      required:
      - "variantId"
      - "variantName"
      - "skuCode"
      - "quantityInStock"
    StockUpdateRequest:
      type: "object"
      properties:
        newStock:
          type: "number"
          format: "double"
      required:
      - "newStock"
    UserResponse:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        factoryId:
          type: "integer"
          format: "int32"
        name:
          type: "string"
        email:
          type: "string"
        role:
          type: "string"
      required:
      - "id"
      - "factoryId"
      - "name"
      - "email"
      - "role"
    WorkflowResponse:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        factoryId:
          type: "integer"
          format: "int32"
        workflowName:
          type: "string"
        description:
          type: "string"
      required:
      - "id"
      - "factoryId"
      - "workflowName"
      - "description"
    WorkflowRequest:
      type: "object"
      properties:
        factoryId:
          type: "integer"
          format: "int32"
        workflowName:
          type: "string"
        description:
          type: "string"
      required:
      - "factoryId"
      - "workflowName"
      - "description"
    TaskResponse:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        workflowId:
          type: "integer"
          format: "int32"
        taskName:
          type: "string"
        payRatePerUnit:
          type: "number"
          format: "double"
      required:
      - "id"
      - "workflowId"
      - "taskName"
      - "payRatePerUnit"
    TaskRequest:
      type: "object"
      properties:
        taskName:
          type: "string"
        payRatePerUnit:
          type: "number"
          format: "double"
      required:
      - "taskName"
      - "payRatePerUnit"